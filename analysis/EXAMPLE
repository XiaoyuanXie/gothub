To generate a stat, then view it (assuming followers is a local file):

./graph_util.py --write_stats -m 999 --degree
./plot.py -i followers_999 --write

Using a file w/ CSV links:
./graph_util.py --input_type links \
    --input "../../stanford-geo-viz/followers.csv" \
    --write \
    -m 0 --print_interval 1000000 \
    --degree --pagerank \
    --write_stats
./plot.py -i followers --write

Generating repos_contributors plots:
./contributor_analysis.py
mv repos_contributors.gpk repos_contributors_all.gpk
./graph_util.py \
    --input repos_contributors_all.gpk \
    --degree \
    --write_stats \
    -m 0
./plot.py -i repos_contributors_all --write

Create, geocode, and geo-reduce a test graph:
./make_geo_reduce_test.py
./geo_import.py --input geo_test
./geo_reduce.py --input geo_test

Create, geocode, and geo-reduce the full social graph:
./graph_util.py --input_type links \
    --input "../../stanford-geo-viz/followers.csv" \
    --write \
    -m 0 --print_interval 1000000
./geo_import.py --input followers
./geo_reduce.py --input followers

Write the full raw graph to GEXF for Gephi and EdgeBundling:
./geo_reduce.py --input followers --no-filter-cities

Write a city-reduced graph:
./geo_reduce.py --input followers --city_filter westcoast

Generate common GEXF outputs:
for geo in world bayarea cali america europe australia; do
    ./geo_reduce.py --input followers --no-filter-cities --geo_filter ${geo}
done;

Generate single GEXF output, reduced to bounding box:
./geo_reduce.py --input followers --no-filter-cities --geo_filter australia

##############################################################################
New-style graph creation examples:

Create, geocode, and geo-reduce the full social graph:
./graph_util.py --input_type links \
    --input "../../stanford-geo-viz/followers.csv" \
    --write \
    -m 0 --print_interval 1000000
geograph/gg_create_from_social.py --input followers
geograph/gg_export.py --input followers